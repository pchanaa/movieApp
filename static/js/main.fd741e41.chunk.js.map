{"version":3,"sources":["moive.js","App.js","index.js"],"names":["Movie","props","len","Object","keys","genres","length","newGenre","i","console","log","push","className","src","img","alt","title","year","summary","slice","App","state","isLoading","movies","number","print","genre","getApi","a","axios","get","mov","data","setState","this","setTimeout","map","movie","id","medium_cover_image","key","React","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2RAwCeA,EArCD,SAACC,GACb,IAAIC,EAAMC,OAAOC,KAAKH,EAAMI,QAAQC,OAChCC,EAAW,GAYf,OAXC,WACC,IAAI,IAAIC,EAAI,EAAEA,EAAEN,EAAIM,IAClBC,QAAQC,IAAIT,EAAMI,OAAOG,IACtBA,IAAIN,EAAI,EACTK,EAASI,KAAKV,EAAMI,OAAOG,GAAG,MAEhCD,EAASI,KAAKV,EAAMI,OAAOG,IAN9B,GAYK,yBAAKI,UAAW,aACd,yBAAKC,IAAOZ,EAAMa,IAAKC,IAAOd,EAAMe,MAAOA,MAAOf,EAAMe,QAC1D,yBAAKJ,UAAY,YACf,wBAAIA,UAAY,aAAaX,EAAMe,OACnC,wBAAIJ,UAAY,YAAYX,EAAMgB,MAClC,yBAAKL,UAAY,kBACb,wBAAIA,UAAW,UAAf,WAAiCL,IAErC,uBAAGK,UAAY,eAAeX,EAAMiB,QAAQC,MAAM,EAAE,KAApD,UCoDKC,G,kNAxEbC,MAAQ,CACNC,WAAW,EACXC,OAAQ,GACRC,OAAQ,G,EAGZC,MAAM,WACJhB,QAAQC,IAAI,EAAKgB,Q,EAEjBC,O,sBAAS,8BAAAC,EAAA,sEAKuBC,IAAMC,IAClC,oEANK,gBAGaC,EAHb,EAELC,KACEA,KAAQT,OAKVd,QAAQC,IAAIqB,GACd,EAAKE,UAAS,SAACZ,GACb,MAAO,CAAEE,OAAQQ,EAAKT,WAAW,MAV5B,2C,kEAeY,IAAD,OACVA,EAAcY,KAAKb,MAAnBC,UACHA,GACHa,YAAW,WAKT,EAAKF,SAAS,CAAEX,WAAYA,MAC3B,KACLY,KAAKP,W,+BAGG,IAAD,EACsBO,KAAKb,MAA1BC,EADD,EACCA,UAAWC,EADZ,EACYA,OAGnB,OAFAd,QAAQC,IAAIa,GAGR,6BAASX,UAAU,aAClBU,EACI,yBAAKV,UAAU,UACd,0BAAMA,UAAU,YAAhB,eAGJ,yBAAKA,UAAW,UACXW,EAAOa,KAAI,SAACC,GACX,OACE,kBAAC,EAAD,CACEC,GAAID,EAAMC,GACVrB,KAAMoB,EAAMpB,KACZD,MAAOqB,EAAMrB,MACbE,QAASmB,EAAMnB,QACfJ,IAAKuB,EAAME,mBACXlC,OAAQgC,EAAMhC,OACdmC,IAAKH,EAAMC,c,GA3DbG,IAAMC,YCAxBC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.fd741e41.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Movie = (props) => {\r\n  let len = Object.keys(props.genres).length;\r\n  let newGenre = [];\r\n  (function a(){\r\n    for(let i = 0;i<len;i++){\r\n      console.log(props.genres[i]);\r\n      if(i!==len-1)\r\n        newGenre.push(props.genres[i]+\", \")\r\n      else\r\n      newGenre.push(props.genres[i])\r\n    }\r\n  }())\r\n\r\n  //jsx에서는 연 태그는 무조건 닫아야 한다, img태그는 <img/>혹은 <img></img>로 하면 된다\r\n  return(\r\n        <div className =\"in_movies\">\r\n          <img src = {props.img} alt = {props.title} title={props.title}/>\r\n        <div className = \"contents\">\r\n          <h2 className = \"mov_title\">{props.title}</h2>\r\n          <h4 className = \"mov_year\">{props.year}</h4>\r\n          <div className = \"genre_Contents\">\r\n              <h5 className =\"genres\">Gerne : {newGenre}</h5>\r\n          </div>\r\n          <p className = \"mov_summary\">{props.summary.slice(0,140)}...</p>\r\n        </div>\r\n      </div>\r\n  ); \r\n};\r\nMovie.propTypes = {\r\n  id: PropTypes.number,\r\n  year: PropTypes.number,\r\n  title: PropTypes.string,\r\n  summary: PropTypes.string,\r\n  genres : PropTypes.object,\r\n  img: PropTypes.string,  \r\n  key : PropTypes.number\r\n};\r\nexport default Movie;\r\n","import React from \"react\";\nimport axios from \"axios\";\nimport Movie from \"./moive\";\nimport \"./App.css\"\n\nclass App extends React.Component {\n  state = {\n    isLoading: true,\n    movies: [],\n    number: 0,\n    \n  };\nprint=()=>{\n  console.log(this.genre)\n}\n  getApi = async () => {\n    const {\n      data: {\n        data: { movies: mov }, //객체 구조 분해 할당으로 그 값이 배열이여도 인덱스에 있는 값을 사용할 수 없다\n      },\n    } /*es6 문법 구조 분해 할당*/ = await axios.get(\n      \"https://yts-proxy.now.sh/list_movies.json?sort_by=download_count\"\n    );\n      console.log(mov)\n    this.setState((state) => {\n      return { movies: mov, isLoading: false};\n    }); //setState함수에 되도록이면 함수를 전달하자__\n    //위에 꺼는  this.setState(state=>({movies : mov, isLoading : false}))으로도 쓸수 있다.\n    //console.log(this.state.movies)\n  };\n  componentDidMount() {\n    const { isLoading } = this.state;\n    if (!isLoading)\n      setTimeout(() => {\n        //(()=>{})() ===> 즉시 실행 화살표 함수\n        // this.setState(current => ({isLoading:!current.isLoading}))\n        //or this.setState(current => {return {isLoading:!currentLoading}})\n        //this.setState({isLoading:!this.state.isLoading})\n        this.setState({ isLoading: !isLoading });\n      }, 6000); // or setTimeout(function(){~~})\n    this.getApi();\n  }\n\n  render() {\n    const { isLoading, movies} = this.state; //es6 == 비구조화 할당\n    console.log(movies)\n    \n    return (\n        <section className=\"container\">\n        {isLoading\n          ? (<div className=\"loader\">\n              <span className=\"loadText\">Loading...</span>\n            </div>)\n            : \n          <div className =\"movies\">\n              {movies.map((movie) => {\n                return (\n                  <Movie\n                    id={movie.id}\n                    year={movie.year}\n                    title={movie.title}\n                    summary={movie.summary}\n                    img={movie.medium_cover_image}\n                    genres={movie.genres}\n                    key={movie.id}\n                  />\n                );\n              })}\n          </div>\n          \n           }\n        </section>\n    );\n  \n  }\n  \n}\n//{movies.map(movie=> (<Movie id={movie.id}year={movie.year} title={movie.title} summary={movie.summary}  />))} 50번째 줄은 다음과 같이 대체할 수 있음\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n"],"sourceRoot":""}